import { Blockfrost, Lucid, Data, Constr } from "https://deno.land/x/lucid@0.8.3/mod.ts";

async function performSwap() {
  // Initialize Lucid with Blockfrost API
  const lucid = await Lucid.new(
    new Blockfrost(
      "https://cardano-mainnet.blockfrost.io/api/v0",
      "mainnetBFLQewPEEXwa74qT0kIiPKHA0Tfxl",
    ),
    "Mainnet",
  );

  // Replace with the path to the bot's private key file
  const botPrivateKeyFilePath = "./wallets/Tostao1101.sk";
  // Read the bot's private key from the file
  const botPrivateKey = await Deno.readTextFile(botPrivateKeyFilePath);

  // Import the bot wallet using the private key
  const wallet = await lucid.selectWalletFromPrivateKey(botPrivateKey);

  // Get the paymentCredential hash from the wallet address
  const walletAddress = await lucid.wallet.address();
  const { paymentCredential } = lucid.utils.getAddressDetails(walletAddress);
  const paymentCredentialHash = paymentCredential?.hash;

  // Replace undefined with your known stake credential hash
  const stakeCredentialHash = "a8bda3e68eb5a7255baebfa4e302ba48b69eff5de72e81259d5f";

  console.log("Payment Credential Hash:", paymentCredentialHash);
  console.log("Stake Credential Hash:", stakeCredentialHash);

  if (!paymentCredentialHash || !stakeCredentialHash) {
    console.error("Could not retrieve paymentCredential and/or stakeCredential hashes.");
    return;
  }

  // The MinSwap contract address
  const minswapAddress = "addr1zxn9efv2f6w82hagxqtn62ju4m293tqvw0uhmdl64ch8uw6j2c79gy9l76sdg0xwhd7r0c0kna0tycz4y5s6mlenh8pq6s3z70"; // Replace with the MinSwap contract address

  // Define the metadata for the transaction
  const metaData = { msg: ["Minswap: Swap Exact In Order"] };

  // Construct the DatumMinswap object
  const DatumMinswap = Data.to(
    new Constr(0, [
      new Constr(0, [new Constr(0, [paymentCredentialHash])]), // pubKey Of Sender Wallet
      new Constr(0, [new Constr(0, [new Constr(0, [stakeCredentialHash])])]), // StakeKey Of Sender Wallet
      new Constr(0, [new Constr(0, [paymentCredentialHash])]), // pubKey Of Receiver Wallet
      new Constr(0, [new Constr(0, [new Constr(0, [stakeCredentialHash])])]), // StakeKey Of Receiver Wallet
      new Constr(1, [new Constr(0, ["29d222ce763455e3d7a09a665ce554f00ac89d2e99a1a83d267170c6", "4d494e"]), BigInt(1)]), BigInt(2000000), // batcherFee
      BigInt(2000000), // deposit
    ])
  );

  try {
    // Create a new transaction
    const tx = await lucid.newTx().payToContract(minswapAddress, { asHash: DatumMinswap }, {
      lovelace: 6000000n, // Here, you are purchasing 5 ADA of tokens (2 ADA batcher fee + 2 ADA deposit)
    }).attachMetadata(674, metaData).complete({ nativeUplc: true });

    // Sign the transaction
    const signedTx = await tx.sign(botPrivateKey).complete();

    // Submit the transaction
    const txHash = await signedTx.submit();
    console.log("Transaction submitted. TxHash:", txHash);
  } catch (error) {
    console.error("Error occurred:", error);
  }
}

// Run the function
performSwap();
